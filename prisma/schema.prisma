generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @db.VarChar(64)
  username     String?  @unique
  displayName  String?
  email        String?  @unique
  avatarUrl    String?
  bannerUrl    String?
  emailUpdates Boolean  @default(false)
  marketAlerts Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  bets         Bet[]
  markets      Market[] @relation("UserMarkets")
  payouts      Payout[]
}

model Market {
  id        Int      @id @default(autoincrement())
  title     String
  onchainAddr String? @unique
  // Resolution fields: used by server-side validation and integration tests
  status    String?  @default("open")
  winningOutcome Int?
  totalPool Float    @default(0)
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creatorId String?
  bets      Bet[]
  creator   User?    @relation("UserMarkets", fields: [creatorId], references: [id])
  payouts   Payout[]
}

model Bet {
  id            Int      @id @default(autoincrement())
  amount        Float
  createdAt     DateTime @default(now())
  marketId      Int
  userId        String?
  txHash        String   @unique
  walletChainId Int
  outcomeIndex  Int
  walletAddress String
  market        Market   @relation(fields: [marketId], references: [id])
  user          User?    @relation(fields: [userId], references: [id])
}

model Payout {
  id       Int    @id @default(autoincrement())
  amount   Float
  marketId Int
  userId   String
  market   Market @relation(fields: [marketId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
}

model Audit {
  id        Int      @id @default(autoincrement())
  action    String
  actor     String?
  metadata  Json?
  createdAt DateTime @default(now())
}

// Admins table: grants access to admin panel via email and/or wallet address
model Admin {
  id        Int      @id @default(autoincrement())
  email     String?  @unique
  wallet    String?  @unique @db.VarChar(64)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  key   String @id
  value Json
  updatedAt DateTime @updatedAt
}
